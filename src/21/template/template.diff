diff --git a/src/impls.rs b/src/impls.rs
index c0e7cb27..741a6ffd 100644
--- a/src/impls.rs
+++ b/src/impls.rs
@@ -3,11 +3,16 @@ use frame::prelude::*;
 
 impl<T: Config> Pallet<T> {
 	pub fn mint(owner: T::AccountId, dna: [u8; 32]) -> DispatchResult {
+		/* ğŸš§ TODO ğŸš§:
+			- Create a new variable `kitty` which is a `Kitty` struct with `dna` and `owner`.
+		*/
+
 		// Check if the kitty does not already exist in our storage map
 		ensure!(!Kitties::<T>::contains_key(dna), Error::<T>::DuplicateKitty);
 
 		let current_count: u32 = CountForKitties::<T>::get();
 		let new_count = current_count.checked_add(1).ok_or(Error::<T>::TooManyKitties)?;
+		/* ğŸš§ TODO ğŸš§: Insert `kitty`into the map instead of `()`. */
 		Kitties::<T>::insert(dna, ());
 		CountForKitties::<T>::set(new_count);
 		Self::deposit_event(Event::<T>::Created { owner });
diff --git a/src/lib.rs b/src/lib.rs
index 30d12b4c..68f57e11 100644
--- a/src/lib.rs
+++ b/src/lib.rs
@@ -18,6 +18,10 @@ pub mod pallet {
 		type RuntimeEvent: From<Event<Self>> + IsType<<Self as frame_system::Config>::RuntimeEvent>;
 	}
 
+	/* ğŸš§ TODO ğŸš§:
+		- Add the derive macros needed for putting a struct in storage.
+		- Add `#[scale_info(skip_type_params(T))]` to ignore the generic `T`.
+	*/
 	pub struct Kitty<T: Config> {
 		// Using 32 bytes to represent a kitty DNA
 		pub dna: [u8; 32],
@@ -28,6 +32,7 @@ pub mod pallet {
 	pub(super) type CountForKitties<T: Config> = StorageValue<Value = u32, QueryKind = ValueQuery>;
 
 	#[pallet::storage]
+	/* ğŸš§ TODO ğŸš§: Update the `Value` to be type `Kitty<T>` instead of (). */
 	pub(super) type Kitties<T: Config> = StorageMap<Key = [u8; 32], Value = ()>;
 
 	#[pallet::event]
