diff --git a/src/lib.rs b/src/lib.rs
index c8ea8705..30d12b4c 100644
--- a/src/lib.rs
+++ b/src/lib.rs
@@ -18,13 +18,11 @@ pub mod pallet {
 		type RuntimeEvent: From<Event<Self>> + IsType<<Self as frame_system::Config>::RuntimeEvent>;
 	}
 
-	/* ðŸš§ TODO ðŸš§:
-		- Create a new `struct` called `Kitty`.
-		- Make `Kitty` generic over `T` where `T: Config`.
-		- Add two fields to `Kitty`:
-			- `dna` which is type `[u8; 32]`.
-			- `owner` which is type `T::AccountId`.
-	*/
+	pub struct Kitty<T: Config> {
+		// Using 32 bytes to represent a kitty DNA
+		pub dna: [u8; 32],
+		pub owner: T::AccountId,
+	}
 
 	#[pallet::storage]
 	pub(super) type CountForKitties<T: Config> = StorageValue<Value = u32, QueryKind = ValueQuery>;
diff --git a/src/tests.rs b/src/tests.rs
index 44dd98f9..f3652059 100644
--- a/src/tests.rs
+++ b/src/tests.rs
@@ -28,9 +28,8 @@ type Block = frame_system::mocking::MockBlock<TestRuntime>;
 // We create the constants `ALICE` and `BOB` to make it clear when we are representing users below.
 const ALICE: u64 = 1;
 const BOB: u64 = 2;
-/* ðŸš§ TODO ðŸš§:
-	- Create `const DEFAULT_KITTY` with a `dna` of [0u8; 32] and an `owner` of 0 };.
-*/
+#[allow(unused)]
+const DEFAULT_KITTY: Kitty<TestRuntime> = Kitty { dna: [0u8; 32], owner: 0 };
 
 #[runtime]
 mod runtime {
