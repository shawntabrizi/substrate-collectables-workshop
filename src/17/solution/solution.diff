diff --git a/src/impls.rs b/src/impls.rs
index 44437026..363f5e49 100644
--- a/src/impls.rs
+++ b/src/impls.rs
@@ -2,11 +2,10 @@ use super::*;
 use frame::prelude::*;
 
 impl<T: Config> Pallet<T> {
-	/* ğŸš§ TODO ğŸš§: Update this function signature to include `dna` which is type `[u8; 32]`. */
-	pub fn mint(owner: T::AccountId) -> DispatchResult {
+	pub fn mint(owner: T::AccountId, dna: [u8; 32]) -> DispatchResult {
 		let current_count: u32 = CountForKitties::<T>::get();
 		let new_count = current_count.checked_add(1).ok_or(Error::<T>::TooManyKitties)?;
-		/* ğŸš§ TODO ğŸš§: In the `Kitties` map, under the key `dna`, insert `()`. */
+		Kitties::<T>::insert(dna, ());
 		CountForKitties::<T>::set(new_count);
 		Self::deposit_event(Event::<T>::Created { owner });
 		Ok(())
diff --git a/src/lib.rs b/src/lib.rs
index 717c9009..15fb5043 100644
--- a/src/lib.rs
+++ b/src/lib.rs
@@ -39,11 +39,8 @@ pub mod pallet {
 	impl<T: Config> Pallet<T> {
 		pub fn create_kitty(origin: OriginFor<T>) -> DispatchResult {
 			let who = ensure_signed(origin)?;
-			/* ğŸš§ TODO ğŸš§:
-				- Create a `dna` variable for this kitty, which we will set as `[0u8; 32]` for now.
-				- Pass `dna` to the `mint` function as the second parameter.
-			*/
-			Self::mint(who)?;
+			let dna = [0u8; 32];
+			Self::mint(who, dna)?;
 			Ok(())
 		}
 	}
diff --git a/src/tests.rs b/src/tests.rs
index 58334971..8fca31e4 100644
--- a/src/tests.rs
+++ b/src/tests.rs
@@ -182,3 +182,11 @@ fn kitties_map_created_correctly() {
 		assert!(Kitties::<TestRuntime>::contains_key(zero_key));
 	})
 }
+
+#[test]
+fn create_kitty_adds_to_map() {
+	new_test_ext().execute_with(|| {
+		assert_ok!(PalletKitties::create_kitty(RuntimeOrigin::signed(ALICE)));
+		assert_eq!(Kitties::<TestRuntime>::iter().count(), 1);
+	})
+}
