diff --git a/src/impls.rs b/src/impls.rs
index f8f58b46..793dec31 100644
--- a/src/impls.rs
+++ b/src/impls.rs
@@ -3,6 +3,7 @@ use frame::prelude::*;
 use frame::primitives::BlakeTwo256;
 use frame::traits::Hash;
 
+// Learn about internal functions.
 impl<T: Config> Pallet<T> {
 	// Generates and returns DNA
 	pub fn gen_dna() -> [u8; 32] {
@@ -26,10 +27,7 @@ impl<T: Config> Pallet<T> {
 		let current_count: u32 = CountForKitties::<T>::get();
 		let new_count = current_count.checked_add(1).ok_or(Error::<T>::TooManyKitties)?;
 
-		/* ðŸš§ TODO ðŸš§:
-			- Update `append` to `try_append` and `map_err` to `Error::<T>::TooManyOwned`.
-		*/
-		KittiesOwned::<T>::append(&owner, dna);
+		KittiesOwned::<T>::try_append(&owner, dna).map_err(|_| Error::<T>::TooManyOwned)?;
 		Kitties::<T>::insert(dna, kitty);
 		CountForKitties::<T>::set(new_count);
 
diff --git a/src/lib.rs b/src/lib.rs
index 40f25922..e0329740 100644
--- a/src/lib.rs
+++ b/src/lib.rs
@@ -36,8 +36,7 @@ pub mod pallet {
 	#[pallet::storage]
 	pub(super) type KittiesOwned<T: Config> = StorageMap<
 		Key = T::AccountId,
-		/* ðŸš§ TODO ðŸš§: Turn this into a `BoundedVec` with a limit of `ConstU32<100>`. */
-		Value = Vec<[u8; 32]>,
+		Value = BoundedVec<[u8; 32], ConstU32<100>>,
 		QueryKind = ValueQuery,
 	>;
 
@@ -51,7 +50,7 @@ pub mod pallet {
 	pub enum Error<T> {
 		TooManyKitties,
 		DuplicateKitty,
-		/* ðŸš§ TODO ðŸš§: Add a new `Error` named `TooManyOwned` */
+		TooManyOwned,
 	}
 
 	#[pallet::call]
diff --git a/src/tests.rs b/src/tests.rs
index 546344b8..6a7f5b74 100644
--- a/src/tests.rs
+++ b/src/tests.rs
@@ -245,3 +245,17 @@ fn kitties_owned_created_correctly() {
 		assert_eq!(KittiesOwned::<TestRuntime>::get(1).len(), 2);
 	});
 }
+
+#[test]
+fn cannot_own_too_many_kitties() {
+	new_test_ext().execute_with(|| {
+		// If your max owned is different than 100, you will need to update this.
+		for _ in 0..100 {
+			assert_ok!(PalletKitties::create_kitty(RuntimeOrigin::signed(ALICE)));
+		}
+		assert_noop!(
+			PalletKitties::create_kitty(RuntimeOrigin::signed(1)),
+			Error::<TestRuntime>::TooManyOwned
+		);
+	});
+}
