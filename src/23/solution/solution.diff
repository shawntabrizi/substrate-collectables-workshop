diff --git a/src/impls.rs b/src/impls.rs
index 05c43d7a..e464223c 100644
--- a/src/impls.rs
+++ b/src/impls.rs
@@ -26,10 +26,10 @@ impl<T: Config> Pallet<T> {
 		let current_count: u32 = CountForKitties::<T>::get();
 		let new_count = current_count.checked_add(1).ok_or(Error::<T>::TooManyKitties)?;
 
-		/* ðŸš§ TODO ðŸš§: `append` the `dna` to the `KittiesOwned` storage for the `owner`. */
-
+		KittiesOwned::<T>::append(&owner, dna);
 		Kitties::<T>::insert(dna, kitty);
 		CountForKitties::<T>::set(new_count);
+
 		Self::deposit_event(Event::<T>::Created { owner });
 		Ok(())
 	}
diff --git a/src/lib.rs b/src/lib.rs
index a92f8e52..9c10069f 100644
--- a/src/lib.rs
+++ b/src/lib.rs
@@ -32,11 +32,10 @@ pub mod pallet {
 	#[pallet::storage]
 	pub(super) type Kitties<T: Config> = StorageMap<Key = [u8; 32], Value = Kitty<T>>;
 
-	/* ðŸš§ TODO ðŸš§: Create a new `StorageMap` called `KittiesOwned`.
-		- The `Key` of this map is `T::AccountId`.
-		- The `Value` of this map is `Vec<[u8; 32]>`.
-		- The `QueryKind` should be set to `ValueQuery`.
-	*/
+	/// Track the kitties owned by each account.
+	#[pallet::storage]
+	pub(super) type KittiesOwned<T: Config> =
+		StorageMap<Key = T::AccountId, Value = Vec<[u8; 32]>, QueryKind = ValueQuery>;
 
 	#[pallet::event]
 	#[pallet::generate_deposit(pub(super) fn deposit_event)]
diff --git a/src/tests.rs b/src/tests.rs
index bd09cce2..546344b8 100644
--- a/src/tests.rs
+++ b/src/tests.rs
@@ -232,3 +232,16 @@ fn create_kitty_makes_unique_kitties() {
 		assert_eq!(Kitties::<TestRuntime>::iter().count(), 2);
 	})
 }
+
+#[test]
+fn kitties_owned_created_correctly() {
+	new_test_ext().execute_with(|| {
+		// Initially users have no kitties owned.
+		assert_eq!(KittiesOwned::<TestRuntime>::get(1).len(), 0);
+		// Let's create two kitties.
+		assert_ok!(PalletKitties::create_kitty(RuntimeOrigin::signed(ALICE)));
+		assert_ok!(PalletKitties::create_kitty(RuntimeOrigin::signed(ALICE)));
+		// Now they should have two kitties owned.
+		assert_eq!(KittiesOwned::<TestRuntime>::get(1).len(), 2);
+	});
+}
