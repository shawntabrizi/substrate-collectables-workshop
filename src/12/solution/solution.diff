diff --git a/src/lib.rs b/src/lib.rs
index 7d88fffb..90242f63 100644
--- a/src/lib.rs
+++ b/src/lib.rs
@@ -18,11 +18,8 @@ pub mod pallet {
 		type RuntimeEvent: From<Event<Self>> + IsType<<Self as frame_system::Config>::RuntimeEvent>;
 	}
 
-	/* ðŸš§ TODO ðŸš§:
-		- Create a new `StorageValue` named `CountForKitties`.
-			- `CountForKitties` should be generic over `<T: Config>`.
-			- Set `Value` to `u32` to store that type.
-	*/
+	#[pallet::storage]
+	pub(super) type CountForKitties<T: Config> = StorageValue<Value = u32>;
 
 	#[pallet::event]
 	#[pallet::generate_deposit(pub(super) fn deposit_event)]
diff --git a/src/tests.rs b/src/tests.rs
index 59889339..9ceddfbb 100644
--- a/src/tests.rs
+++ b/src/tests.rs
@@ -135,3 +135,17 @@ fn create_kitty_emits_event() {
 		System::assert_last_event(Event::<TestRuntime>::Created { owner: 1 }.into());
 	})
 }
+
+#[test]
+fn count_for_kitties_created_correctly() {
+	new_test_ext().execute_with(|| {
+		// Querying storage before anything is set will return `None`.
+		assert_eq!(CountForKitties::<TestRuntime>::get(), None);
+		// You can `set` the value using an `Option<u32>`.
+		CountForKitties::<TestRuntime>::set(Some(1337u32));
+		// You can `put` the value directly with a `u32`.
+		CountForKitties::<TestRuntime>::put(1337u32);
+		// Check that the value is now in storage.
+		assert_eq!(CountForKitties::<TestRuntime>::get(), Some(1337u32));
+	})
+}
