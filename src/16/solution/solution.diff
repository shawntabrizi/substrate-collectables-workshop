diff --git a/src/lib.rs b/src/lib.rs
index bb395631..42fb376b 100644
--- a/src/lib.rs
+++ b/src/lib.rs
@@ -21,12 +21,8 @@ pub mod pallet {
 	#[pallet::storage]
 	pub(super) type CountForKitties<T: Config> = StorageValue<Value = u32, QueryKind = ValueQuery>;
 
-	/* ğŸš§ TODO ğŸš§:
-		- Create a new `StorageMap` named `Kitties`.
-			- `Kitties` should be generic over `<T: Config>`.
-			- Set `Key` to `[u8; 32]` to use the kitty id as the key.
-			- Set `Value` to `()` as a placeholder for now.
-	*/
+	#[pallet::storage]
+	pub(super) type Kitties<T: Config> = StorageMap<Key = [u8; 32], Value = ()>;
 
 	#[pallet::event]
 	#[pallet::generate_deposit(pub(super) fn deposit_event)]
diff --git a/src/tests.rs b/src/tests.rs
index cdbc4e25..58334971 100644
--- a/src/tests.rs
+++ b/src/tests.rs
@@ -172,3 +172,13 @@ fn mint_errors_when_overflow() {
 		);
 	})
 }
+
+#[test]
+fn kitties_map_created_correctly() {
+	new_test_ext().execute_with(|| {
+		let zero_key = [0u8; 32];
+		assert!(!Kitties::<TestRuntime>::contains_key(zero_key));
+		Kitties::<TestRuntime>::insert(zero_key, ());
+		assert!(Kitties::<TestRuntime>::contains_key(zero_key));
+	})
+}
