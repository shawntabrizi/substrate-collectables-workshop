diff --git a/src/impls.rs b/src/impls.rs
index d44508bd..55742115 100644
--- a/src/impls.rs
+++ b/src/impls.rs
@@ -36,28 +36,23 @@ impl<T: Config> Pallet<T> {
 	}
 
 	pub fn do_transfer(from: T::AccountId, to: T::AccountId, kitty_id: [u8; 32]) -> DispatchResult {
-		/* ðŸš§ TODO ðŸš§: Sanity check the transfer is allowed:
-			- First `ensure!` that `from` and `to` are not equal, else return `Error::<T>::TransferToSelf`.
-			- Get the `kitty` from `Kitties` using `kitty_id`, else return `Error::<T>::NoKitty`.
-			- Check the `kitty.owner` is equal to `from`, else return `NotOwner`.
-		*/
-
-		/* ðŸš§ TODO ðŸš§: Update the owner of the kitty:
-			- Update `kitty.owner` to `to`.
-			- Update the `KittiesOwned` of `from` and `to:
-				- Create a mutable `to_owned` by querying `KittiesOwned` for `to`.
-				- `try_push` the `kitty_id` to the `to_owned` vector.
-					- If the vector is full, `map_err` and return `Error::<T>::TooManyOwned`.
-				- Create a mutable `from_owned` by querying `KittiesOwned` for `from`.
-				- Write logic to `swap_remove` the item from the `from_owned` vector.
-					- If you cannot find the kitty in the vector, return `Error::<T>::NoKitty`.
-		*/
-
-		/* ðŸš§ TODO ðŸš§: Update the final storage.
-			- Insert into `Kitties` under `kitty_id` the modified `kitty` struct.
-			- Insert into `KittiesOwned` under `to` the modified `to_owned` vector.
-			- Insert into `KittiesOwned` under `from` the modified `from_owned` vector.
-		*/
+		ensure!(from != to, Error::<T>::TransferToSelf);
+		let mut kitty = Kitties::<T>::get(kitty_id).ok_or(Error::<T>::NoKitty)?;
+		ensure!(kitty.owner == from, Error::<T>::NotOwner);
+		kitty.owner = to.clone();
+
+		let mut to_owned = KittiesOwned::<T>::get(&to);
+		to_owned.try_push(kitty_id).map_err(|_| Error::<T>::TooManyOwned)?;
+		let mut from_owned = KittiesOwned::<T>::get(&from);
+		if let Some(ind) = from_owned.iter().position(|&id| id == kitty_id) {
+			from_owned.swap_remove(ind);
+		} else {
+			return Err(Error::<T>::NoKitty.into())
+		}
+
+		Kitties::<T>::insert(kitty_id, kitty);
+		KittiesOwned::<T>::insert(&to, to_owned);
+		KittiesOwned::<T>::insert(&from, from_owned);
 
 		Self::deposit_event(Event::<T>::Transferred { from, to, kitty_id });
 		Ok(())
diff --git a/src/lib.rs b/src/lib.rs
index 7256cb5b..d44d77dd 100644
--- a/src/lib.rs
+++ b/src/lib.rs
@@ -52,11 +52,9 @@ pub mod pallet {
 		TooManyKitties,
 		DuplicateKitty,
 		TooManyOwned,
-		/* ðŸš§ TODO ðŸš§: Add new `Error` variants needed for `do_transfer`:
-			- `TransferToSelf`: for when the `from` and `to` of the transfer is the same.
-			- `NoKitty`: for when a transfer involves a kitty that does not exist.
-			- `NotOwner`: for when a transfer is initiated by someone who is not the current owner.
-		*/
+		TransferToSelf,
+		NoKitty,
+		NotOwner,
 	}
 
 	#[pallet::call]
diff --git a/src/tests.rs b/src/tests.rs
index 3dc077cc..4a168591 100644
--- a/src/tests.rs
+++ b/src/tests.rs
@@ -275,3 +275,38 @@ fn transfer_emits_event() {
 		);
 	});
 }
+
+#[test]
+fn transfer_logic_works() {
+	new_test_ext().execute_with(|| {
+		assert_ok!(PalletKitties::create_kitty(RuntimeOrigin::signed(ALICE)));
+		// Starting state looks good.
+		let kitty = &Kitties::<TestRuntime>::iter_values().collect::<Vec<_>>()[0];
+		let kitty_id = kitty.dna;
+		assert_eq!(kitty.owner, ALICE);
+		assert_eq!(KittiesOwned::<TestRuntime>::get(ALICE), vec![kitty_id]);
+		assert_eq!(KittiesOwned::<TestRuntime>::get(BOB), vec![]);
+		// Cannot transfer to yourself.
+		assert_noop!(
+			PalletKitties::transfer(RuntimeOrigin::signed(ALICE), ALICE, kitty_id),
+			Error::<TestRuntime>::TransferToSelf
+		);
+		// Cannot transfer a non-existent kitty.
+		assert_noop!(
+			PalletKitties::transfer(RuntimeOrigin::signed(ALICE), BOB, [0u8; 32]),
+			Error::<TestRuntime>::NoKitty
+		);
+		// Cannot transfer kitty you do not own.
+		assert_noop!(
+			PalletKitties::transfer(RuntimeOrigin::signed(BOB), ALICE, kitty_id),
+			Error::<TestRuntime>::NotOwner
+		);
+		// Transfer should work when parameters are right.
+		assert_ok!(PalletKitties::transfer(RuntimeOrigin::signed(ALICE), BOB, kitty_id));
+		// Storage is updated correctly.
+		assert_eq!(KittiesOwned::<TestRuntime>::get(ALICE), vec![]);
+		assert_eq!(KittiesOwned::<TestRuntime>::get(BOB), vec![kitty_id]);
+		let kitty = &Kitties::<TestRuntime>::iter_values().collect::<Vec<_>>()[0];
+		assert_eq!(kitty.owner, BOB);
+	});
+}
