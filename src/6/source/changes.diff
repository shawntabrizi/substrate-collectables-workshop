diff --git a/src/impls.rs b/src/impls.rs
index 7454df9a..ecb2e7df 100644
--- a/src/impls.rs
+++ b/src/impls.rs
@@ -1,8 +1,8 @@
 use super::*;
 use frame::prelude::*;
 
-/* ðŸš§ TODO ðŸš§:  Learn about internal functions. */
 impl<T: Config> Pallet<T> {
+	/* ðŸš§ TODO ðŸš§: Learn about `AccountId`. */
 	pub fn mint(owner: T::AccountId) -> DispatchResult {
 		Self::deposit_event(Event::<T>::Created { owner });
 		Ok(())
diff --git a/src/lib.rs b/src/lib.rs
index 52544f5b..76a79660 100644
--- a/src/lib.rs
+++ b/src/lib.rs
@@ -27,10 +27,10 @@ pub mod pallet {
 	#[pallet::error]
 	pub enum Error<T> {}
 
-	/* ðŸš§ TODO ðŸš§: Learn about callable functions and dispatch. */
 	#[pallet::call]
 	impl<T: Config> Pallet<T> {
 		pub fn create_kitty(origin: OriginFor<T>) -> DispatchResult {
+			/* ðŸš§ TODO ðŸš§: Learn about origin. */
 			let who = ensure_signed(origin)?;
 			Self::mint(who)?;
 			Ok(())
diff --git a/src/tests.rs b/src/tests.rs
index 7e6f34da..d87be46f 100644
--- a/src/tests.rs
+++ b/src/tests.rs
@@ -113,3 +113,13 @@ fn system_and_balances_work() {
 		assert_ok!(PalletBalances::mint_into(&BOB, 100));
 	});
 }
+
+#[test]
+fn create_kitty_checks_signed() {
+	new_test_ext().execute_with(|| {
+		// The `create_kitty` extrinsic should work when being called by a user.
+		assert_ok!(PalletKitties::create_kitty(RuntimeOrigin::signed(ALICE)));
+		// The `create_kitty` extrinsic should fail when being called by an unsigned message.
+		assert_noop!(PalletKitties::create_kitty(RuntimeOrigin::none()), DispatchError::BadOrigin);
+	})
+}
