diff --git a/src/impls.rs b/src/impls.rs
index b9b5548a..d283fd6b 100644
--- a/src/impls.rs
+++ b/src/impls.rs
@@ -3,11 +3,9 @@ use frame::prelude::*;
 
 impl<T: Config> Pallet<T> {
 	pub fn mint(owner: T::AccountId) -> DispatchResult {
-		/* ðŸš§ TODO ðŸš§: Remove the `unwrap_or` which is not needed when using `ValueQuery`. */
-		let current_count: u32 = CountForKitties::<T>::get().unwrap_or(0);
+		let current_count: u32 = CountForKitties::<T>::get();
 		let new_count = current_count.checked_add(1).ok_or(Error::<T>::TooManyKitties)?;
-		/* ðŸš§ TODO ðŸš§: Remove the `Option` wrapper when setting the `new_count`. */
-		CountForKitties::<T>::set(Some(new_count));
+		CountForKitties::<T>::set(new_count);
 		Self::deposit_event(Event::<T>::Created { owner });
 		Ok(())
 	}
diff --git a/src/lib.rs b/src/lib.rs
index eeb9724b..57baa0d1 100644
--- a/src/lib.rs
+++ b/src/lib.rs
@@ -19,8 +19,7 @@ pub mod pallet {
 	}
 
 	#[pallet::storage]
-	/* ðŸš§ TODO ðŸš§: Update this storage to use a `QueryKind` of `ValueQuery`. */
-	pub(super) type CountForKitties<T: Config> = StorageValue<Value = u32>;
+	pub(super) type CountForKitties<T: Config> = StorageValue<Value = u32, QueryKind = ValueQuery>;
 
 	#[pallet::event]
 	#[pallet::generate_deposit(pub(super) fn deposit_event)]
diff --git a/src/tests.rs b/src/tests.rs
index 58df4d40..cdbc4e25 100644
--- a/src/tests.rs
+++ b/src/tests.rs
@@ -139,26 +139,24 @@ fn create_kitty_emits_event() {
 #[test]
 fn count_for_kitties_created_correctly() {
 	new_test_ext().execute_with(|| {
-		// Querying storage before anything is set will return `None`.
-		assert_eq!(CountForKitties::<TestRuntime>::get(), None);
-		// You can `set` the value using an `Option<u32>`.
-		CountForKitties::<TestRuntime>::set(Some(1337u32));
+		// Querying storage before anything is set will return `0`.
+		assert_eq!(CountForKitties::<TestRuntime>::get(), 0);
+		// You can `set` the value using an `u32`.
+		CountForKitties::<TestRuntime>::set(1337u32);
 		// You can `put` the value directly with a `u32`.
 		CountForKitties::<TestRuntime>::put(1337u32);
-		// Check that the value is now in storage.
-		assert_eq!(CountForKitties::<TestRuntime>::get(), Some(1337u32));
 	})
 }
 
 #[test]
 fn mint_increments_count_for_kitty() {
 	new_test_ext().execute_with(|| {
-		// Querying storage before anything is set will return `None`.
-		assert_eq!(CountForKitties::<TestRuntime>::get(), None);
+		// Querying storage before anything is set will return `0`.
+		assert_eq!(CountForKitties::<TestRuntime>::get(), 0);
 		// Call `create_kitty` which will call `mint`.
 		assert_ok!(PalletKitties::create_kitty(RuntimeOrigin::signed(ALICE)));
-		// Now the storage should be `Some(1)`
-		assert_eq!(CountForKitties::<TestRuntime>::get(), Some(1));
+		// Now the storage should be `1`
+		assert_eq!(CountForKitties::<TestRuntime>::get(), 1);
 	})
 }
 
@@ -166,7 +164,7 @@ fn mint_increments_count_for_kitty() {
 fn mint_errors_when_overflow() {
 	new_test_ext().execute_with(|| {
 		// Set the count to the largest value possible.
-		CountForKitties::<TestRuntime>::set(Some(u32::MAX));
+		CountForKitties::<TestRuntime>::set(u32::MAX);
 		// `create_kitty` should not succeed because of safe math.
 		assert_noop!(
 			PalletKitties::create_kitty(RuntimeOrigin::signed(1)),
