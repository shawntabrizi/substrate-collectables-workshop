diff --git a/src/impls.rs b/src/impls.rs
index 7277e367..b9b5548a 100644
--- a/src/impls.rs
+++ b/src/impls.rs
@@ -3,8 +3,10 @@ use frame::prelude::*;
 
 impl<T: Config> Pallet<T> {
 	pub fn mint(owner: T::AccountId) -> DispatchResult {
+		/* ðŸš§ TODO ðŸš§: Remove the `unwrap_or` which is not needed when using `ValueQuery`. */
 		let current_count: u32 = CountForKitties::<T>::get().unwrap_or(0);
 		let new_count = current_count.checked_add(1).ok_or(Error::<T>::TooManyKitties)?;
+		/* ðŸš§ TODO ðŸš§: Remove the `Option` wrapper when setting the `new_count`. */
 		CountForKitties::<T>::set(Some(new_count));
 		Self::deposit_event(Event::<T>::Created { owner });
 		Ok(())
diff --git a/src/lib.rs b/src/lib.rs
index 2c11f460..eeb9724b 100644
--- a/src/lib.rs
+++ b/src/lib.rs
@@ -19,6 +19,7 @@ pub mod pallet {
 	}
 
 	#[pallet::storage]
+	/* ðŸš§ TODO ðŸš§: Update this storage to use a `QueryKind` of `ValueQuery`. */
 	pub(super) type CountForKitties<T: Config> = StorageValue<Value = u32>;
 
 	#[pallet::event]
