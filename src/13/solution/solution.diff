diff --git a/src/impls.rs b/src/impls.rs
index b396f986..97393307 100644
--- a/src/impls.rs
+++ b/src/impls.rs
@@ -3,12 +3,9 @@ use frame::prelude::*;
 
 impl<T: Config> Pallet<T> {
 	pub fn mint(owner: T::AccountId) -> DispatchResult {
-		/* ðŸš§ TODO ðŸš§:
-			- `get` the `current_count` of kitties.
-			- `unwrap_or` set the count to `0`.
-			- Create `new_count` by adding one to the `current_count`.
-			- `set` the `new_count` of kitties.
-		*/
+		let current_count: u32 = CountForKitties::<T>::get().unwrap_or(0);
+		let new_count = current_count + 1;
+		CountForKitties::<T>::set(Some(new_count));
 		Self::deposit_event(Event::<T>::Created { owner });
 		Ok(())
 	}
diff --git a/src/tests.rs b/src/tests.rs
index 9ceddfbb..2b579ffc 100644
--- a/src/tests.rs
+++ b/src/tests.rs
@@ -149,3 +149,15 @@ fn count_for_kitties_created_correctly() {
 		assert_eq!(CountForKitties::<TestRuntime>::get(), Some(1337u32));
 	})
 }
+
+#[test]
+fn mint_increments_count_for_kitty() {
+	new_test_ext().execute_with(|| {
+		// Querying storage before anything is set will return `None`.
+		assert_eq!(CountForKitties::<TestRuntime>::get(), None);
+		// Call `create_kitty` which will call `mint`.
+		assert_ok!(PalletKitties::create_kitty(RuntimeOrigin::signed(ALICE)));
+		// Now the storage should be `Some(1)`
+		assert_eq!(CountForKitties::<TestRuntime>::get(), Some(1));
+	})
+}
