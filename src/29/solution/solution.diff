diff --git a/src/impls.rs b/src/impls.rs
index 2c01fdca..16bdb731 100644
--- a/src/impls.rs
+++ b/src/impls.rs
@@ -20,8 +20,7 @@ impl<T: Config> Pallet<T> {
 	}
 
 	pub fn mint(owner: T::AccountId, dna: [u8; 32]) -> DispatchResult {
-		/* ðŸš§ TODO ðŸš§: Add the `price` field set to `None` when initializing the `Kitty` struct. */
-		let kitty = Kitty { dna, owner: owner.clone() };
+		let kitty = Kitty { dna, owner: owner.clone(), price: None };
 		// Check if the kitty does not already exist in our storage map
 		ensure!(!Kitties::<T>::contains_key(dna), Error::<T>::DuplicateKitty);
 
@@ -41,7 +40,7 @@ impl<T: Config> Pallet<T> {
 		let mut kitty = Kitties::<T>::get(kitty_id).ok_or(Error::<T>::NoKitty)?;
 		ensure!(kitty.owner == from, Error::<T>::NotOwner);
 		kitty.owner = to.clone();
-		/* ðŸš§ TODO ðŸš§: Set the `kitty.price` to `None` for the new owner. */
+		kitty.price = None;
 
 		let mut to_owned = KittiesOwned::<T>::get(&to);
 		to_owned.try_push(kitty_id).map_err(|_| Error::<T>::TooManyOwned)?;
diff --git a/src/lib.rs b/src/lib.rs
index 3a10644d..7d8350d6 100644
--- a/src/lib.rs
+++ b/src/lib.rs
@@ -23,13 +23,9 @@ pub mod pallet {
 		type NativeBalance: Inspect<Self::AccountId> + Mutate<Self::AccountId>;
 	}
 
-	/* ðŸš§ TODO ðŸš§:
-		- Create a new type alias called `BalanceOf<T>`.
-		- Extract the `Balance` type from the `NativeBalance` associated type:
-			- The `Balance` type comes from the `Inspect` trait.
-				- `Inspect` requires a generic parameter `AccountId` from `T as frame_system::Config`.
-			- Inspect comes from `NativeBalance`, which comes from `T as Config`.
-	*/
+	// Allows easy access our Pallet's `Balance` type. Comes from `Fungible` interface.
+	pub type BalanceOf<T> =
+		<<T as Config>::NativeBalance as Inspect<<T as frame_system::Config>::AccountId>>::Balance;
 
 	#[derive(Encode, Decode, TypeInfo, MaxEncodedLen)]
 	#[scale_info(skip_type_params(T))]
@@ -37,7 +33,7 @@ pub mod pallet {
 		// Using 32 bytes to represent a kitty DNA
 		pub dna: [u8; 32],
 		pub owner: T::AccountId,
-		/* ðŸš§ TODO ðŸš§: Add a new field `price`, which is an `Option<BalanceOf<T>>`. */
+		pub price: Option<BalanceOf<T>>,
 	}
 
 	#[pallet::storage]
diff --git a/src/tests.rs b/src/tests.rs
index df5dc0dd..ff0b8c24 100644
--- a/src/tests.rs
+++ b/src/tests.rs
@@ -28,7 +28,7 @@ type Block = frame_system::mocking::MockBlock<TestRuntime>;
 // We create the constants `ALICE` and `BOB` to make it clear when we are representing users below.
 const ALICE: u64 = 1;
 const BOB: u64 = 2;
-const DEFAULT_KITTY: Kitty<TestRuntime> = Kitty { dna: [0u8; 32], owner: 0 };
+const DEFAULT_KITTY: Kitty<TestRuntime> = Kitty { dna: [0u8; 32], owner: 0, price: None };
 
 #[runtime]
 mod runtime {
@@ -322,3 +322,9 @@ fn native_balance_associated_type_works() {
 		);
 	});
 }
+
+#[test]
+fn balance_of_type_works() {
+	// Inside our tests, the `BalanceOf` type has a concrete type of `u64`.
+	let _example_balance: BalanceOf<TestRuntime> = 1337u64;
+}
