diff --git a/src/impls.rs b/src/impls.rs
index 55742115..2c01fdca 100644
--- a/src/impls.rs
+++ b/src/impls.rs
@@ -20,6 +20,7 @@ impl<T: Config> Pallet<T> {
 	}
 
 	pub fn mint(owner: T::AccountId, dna: [u8; 32]) -> DispatchResult {
+		/* ðŸš§ TODO ðŸš§: Add the `price` field set to `None` when initializing the `Kitty` struct. */
 		let kitty = Kitty { dna, owner: owner.clone() };
 		// Check if the kitty does not already exist in our storage map
 		ensure!(!Kitties::<T>::contains_key(dna), Error::<T>::DuplicateKitty);
@@ -40,6 +41,7 @@ impl<T: Config> Pallet<T> {
 		let mut kitty = Kitties::<T>::get(kitty_id).ok_or(Error::<T>::NoKitty)?;
 		ensure!(kitty.owner == from, Error::<T>::NotOwner);
 		kitty.owner = to.clone();
+		/* ðŸš§ TODO ðŸš§: Set the `kitty.price` to `None` for the new owner. */
 
 		let mut to_owned = KittiesOwned::<T>::get(&to);
 		to_owned.try_push(kitty_id).map_err(|_| Error::<T>::TooManyOwned)?;
diff --git a/src/lib.rs b/src/lib.rs
index 59150bd6..3a10644d 100644
--- a/src/lib.rs
+++ b/src/lib.rs
@@ -23,12 +23,21 @@ pub mod pallet {
 		type NativeBalance: Inspect<Self::AccountId> + Mutate<Self::AccountId>;
 	}
 
+	/* ðŸš§ TODO ðŸš§:
+		- Create a new type alias called `BalanceOf<T>`.
+		- Extract the `Balance` type from the `NativeBalance` associated type:
+			- The `Balance` type comes from the `Inspect` trait.
+				- `Inspect` requires a generic parameter `AccountId` from `T as frame_system::Config`.
+			- Inspect comes from `NativeBalance`, which comes from `T as Config`.
+	*/
+
 	#[derive(Encode, Decode, TypeInfo, MaxEncodedLen)]
 	#[scale_info(skip_type_params(T))]
 	pub struct Kitty<T: Config> {
 		// Using 32 bytes to represent a kitty DNA
 		pub dna: [u8; 32],
 		pub owner: T::AccountId,
+		/* ðŸš§ TODO ðŸš§: Add a new field `price`, which is an `Option<BalanceOf<T>>`. */
 	}
 
 	#[pallet::storage]
