diff --git a/src/impls.rs b/src/impls.rs
index 5d3c1046..fac2eada 100644
--- a/src/impls.rs
+++ b/src/impls.rs
@@ -1,7 +1,19 @@
 use super::*;
 use frame::prelude::*;
+/* ðŸš§ TODO ðŸš§: Import `frame::primitives::BlakeTwo256`. */
+/* ðŸš§ TODO ðŸš§: Import `frame::traits::Hash`. */
 
 impl<T: Config> Pallet<T> {
+	/* ðŸš§ TODO ðŸš§: Create a function `gen_dna` which returns a `[u8; 32]`.
+		- Create a `unique_payload` which contains data from `frame_system::Pallet::<T>`:
+			- `parent_hash`
+			- `block_number`
+			- `extrinsic_index`
+			- `CountForKitties::<T>::get()`
+		- Use `BlakeTwo256` to calculate the `hash_of` the unique payload.
+		- Return the hash as a `[u8; 32]`.
+	*/
+
 	pub fn mint(owner: T::AccountId, dna: [u8; 32]) -> DispatchResult {
 		let kitty = Kitty { dna, owner: owner.clone() };
 		// Check if the kitty does not already exist in our storage map
diff --git a/src/lib.rs b/src/lib.rs
index aa6ca3b9..34507f3b 100644
--- a/src/lib.rs
+++ b/src/lib.rs
@@ -48,6 +48,7 @@ pub mod pallet {
 	impl<T: Config> Pallet<T> {
 		pub fn create_kitty(origin: OriginFor<T>) -> DispatchResult {
 			let who = ensure_signed(origin)?;
+			/* ðŸš§ TODO ðŸš§: Use the `Self::gen_dna()` function to generate a unique Kitty. */
 			let dna = [0u8; 32];
 			Self::mint(who, dna)?;
 			Ok(())
